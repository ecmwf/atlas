

function( pluto_host_device variable )
  set( options "" )
  set( single_value_args SOURCE )
  set( multi_value_args "" )
  cmake_parse_arguments( _PAR "${options}" "${single_value_args}" "${multi_value_args}"  ${_FIRST_ARG} ${ARGN} )

  if( ENABLE_CUDA )
    get_filename_component(directory ${_PAR_SOURCE} DIRECTORY)
    get_filename_component(base      ${_PAR_SOURCE} NAME_WE)
    get_filename_component(name      ${_PAR_SOURCE} NAME)
    get_filename_component(abspath   ${_PAR_SOURCE} ABSOLUTE)

    if( directory )
      set(cuda_wrapper ${CMAKE_CURRENT_BINARY_DIR}/${directory}/${base}.cu)
      set(directory "${directory}/")
    else()
      set(cuda_wrapper ${CMAKE_CURRENT_BINARY_DIR}/${base}.cu)
    endif()
    set(${variable} ${cuda_wrapper} PARENT_SCOPE)
    set(content
"
#include \"${directory}${name}\"
")
    if( ${abspath} IS_NEWER_THAN ${cuda_wrapper} )
      file(WRITE ${cuda_wrapper} "${content}")
    endif()
  else()
    set(${variable} ${_PAR_SOURCE} PARENT_SCOPE)
    if( ENABLE_HIP )
      set_source_files_properties( ${_PAR_SOURCES} PROPERTIES LANGUAGE HIP )
    endif()
  endif()
endfunction()

function(target_host_device_sources target)
  set( options PRIVATE PUBLIC INTERFACE  )
  set( single_value_args "")
  set( multi_value_args "" )
  cmake_parse_arguments(PARSE_ARGV 2 _PAR "${options}" "${single_value_args}" "${multi_value_args}")
  set(_PAR_SOURCES ${_PAR_UNPARSED_ARGUMENTS})
  set(wrapped_src_list_)
  foreach( src_ ${_PAR_SOURCES} )
    pluto_host_device( wrapped_src_ SOURCE ${src_} )
    list(APPEND wrapped_src_list_ ${wrapped_src_})
  endforeach()
  if (_PAR_INTERFACE )
    target_sources(${target} INTERFACE ${wrapped_src_list_})
  elseif (_PAR_PUBLIC)
    target_sources(${target} PUBLIC ${wrapped_src_list_})
  else()
    target_sources(${target} PRIVATE ${wrapped_src_list_})
  endif()
endfunction()
