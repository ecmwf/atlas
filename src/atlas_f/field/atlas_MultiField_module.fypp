! (C) Copyright 2013 ECMWF.
!
! This software is licensed under the terms of the Apache Licence Version 2.0
! which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
! In applying this licence, ECMWF does not waive the privileges and immunities
! granted to it by virtue of its status as an intergovernmental organisation nor
! does it submit to any jurisdiction.

#include "atlas/atlas_f.h"

#:include "atlas/atlas_f.fypp"
#:include "internals/atlas_generics.fypp"

module atlas_multifield_module

use fckit_owned_object_module, only : fckit_owned_object
use atlas_Config_module, only: atlas_Config
use atlas_field_module, only: atlas_field, array_c_to_f
use atlas_fieldset_module, only: atlas_fieldset

implicit none

public :: atlas_MultiField

private

!------------------------------------------------------------------------------
TYPE, extends(fckit_owned_object) :: atlas_MultiField

! Purpose :
! -------
!   *MultiField* : Object containing field data and Metadata

! Methods :
! -------
!   name : The name or tag this field was created with
!   data : Return the field as a fortran array of specified shape
!   Metadata : Return object that can contain a variety of Metadata

! Author :
! ------
!   20-Nov-2013 Willem Deconinck     *ECMWF*
!   29-Aug-2023 Slavko Brdar         *ECMWF*

!------------------------------------------------------------------------------
contains
  procedure, public  :: MultiField__fieldset
  procedure, public  :: MultiField__size
  !procedure, public  :: MultiField__data
  generic :: fieldset => MultiField__fieldset
  generic :: size => MultiField__size

#if FCKIT_FINAL_NOT_INHERITING
  final :: atlas_MultiField__final_auto
#endif

#:for rank in ranks
#:for dtype in dtypes
  procedure, private :: access_data_${dtype}$_r${rank}$_by_name
  procedure, private :: access_data_${dtype}$_r${rank}$_by_idx
#:endfor
#:endfor

  generic, public :: data => &
#:for rank in ranks
#:for dtype in dtypes
      & access_data_${dtype}$_r${rank}$_by_name, &
      & access_data_${dtype}$_r${rank}$_by_idx, &
#:endfor
#:endfor
      & dummy

  procedure, private :: dummy

END TYPE

interface atlas_MultiField
  module procedure atlas_MultiField__cptr
  module procedure atlas_MultiField__create
!#:for dtype in integer_dtypes
!  module procedure atlas_MultiField__create_name_kind_shape_${dtype}$
!  module procedure atlas_MultiField__create_kind_shape_${dtype}$
!#:endfor

!#:for rank in ranks
!#:for dtype in dtypes
!  module procedure atlas_MultiField__wrap_${dtype}$_r${rank}$
!  module procedure atlas_MultiField__wrap_name_${dtype}$_r${rank}$
!#:endfor
!#:endfor
end interface

private :: fckit_owned_object
private :: atlas_Config

!========================================================
contains
!========================================================

!-------------------------------------------------------------------------------

function atlas_MultiField__cptr(cptr) result(field)
  use, intrinsic :: iso_c_binding, only : c_ptr
  type(atlas_MultiField) :: field
  type(c_ptr), intent(in) :: cptr
  call field%reset_c_ptr( cptr )
  call field%return()
end function

!-------------------------------------------------------------------------------

function atlas_MultiField__create(params) result(field)
  use atlas_multifield_c_binding
  type(atlas_MultiField) :: field
  class(atlas_Config), intent(in) :: params
  field = atlas_MultiField__cptr( atlas__MultiField__create(params%CPTR_PGIBUG_B) )
  call field%return()
end function

!-------------------------------------------------------------------------------

function MultiField__size(this) result(size)
  use atlas_multifield_c_binding
  class(atlas_MultiField), intent(in) :: this
  integer :: size
  size = atlas__MultiField__size(this%CPTR_PGIBUG_B)
end function

!-------------------------------------------------------------------------------
function MultiField__fieldset(this) result(fset)
  use, intrinsic :: iso_c_binding, only : c_ptr
  use atlas_multifield_c_binding
  class(atlas_MultiField), intent(in) :: this
  type(c_ptr) :: fset_cptr
  type(atlas_FieldSet) :: fset
  fset_cptr = atlas__MultiField__fieldset(this%CPTR_PGIBUG_B)
  fset = atlas_FieldSet( fset_cptr )
  call fset%return()
end function

!-------------------------------------------------------------------------------

#if FCKIT_FINAL_NOT_INHERITING
ATLAS_FINAL subroutine atlas_MultiField__final_auto(this)
  type(atlas_MultiField), intent(inout) :: this
#if FCKIT_FINAL_DEBUGGING
  write(0,*) "atlas_MultiField__final_auto"
#endif
#if FCKIT_FINAL_NOT_PROPAGATING
  call this%final()
#endif
  FCKIT_SUPPRESS_UNUSED( this )
end subroutine
#endif

!-------------------------------------------------------------------------------

#:for rank  in ranks
#:for dtype,ftype,ctype in types
subroutine access_data_${dtype}$_r${rank}$_by_name(this, name, field)
  use fckit_c_interop_module, only: c_str
  use atlas_fieldset_c_binding
  use, intrinsic :: iso_c_binding, only : c_ptr, c_int, c_long, c_float, c_double
  class(atlas_MultiField), intent(in) :: this
  character(len=*), intent(in) :: name
  ${ftype}$, pointer, intent(inout) :: field(${dim[rank]}$)
  type(c_ptr) :: field_cptr
  type(c_ptr) :: shape_cptr
  type(c_ptr) :: strides_cptr
  integer(c_int) :: rank
  type(atlas_FieldSet) :: fset
  fset = this%fieldset()
  call atlas__FieldSet__data_${ctype}$_specf(fset%CPTR_PGIBUG_A, c_str(name), field_cptr, rank, shape_cptr, strides_cptr)
  call array_c_to_f(field_cptr, rank, shape_cptr, strides_cptr, field)
end subroutine
subroutine access_data_${dtype}$_r${rank}$_by_idx(this, idx, field)
  use fckit_c_interop_module, only: c_str
  use atlas_fieldset_c_binding
  use, intrinsic :: iso_c_binding, only : c_ptr, c_int, c_long, c_float, c_double
  class(atlas_MultiField), intent(in) :: this
  integer, intent(in) :: idx
  ${ftype}$, pointer, intent(inout) :: field(${dim[rank]}$)
  type(c_ptr) :: field_cptr
  type(c_ptr) :: shape_cptr
  type(c_ptr) :: strides_cptr
  integer(c_int) :: rank
  type(atlas_FieldSet) :: fset
  fset = this%fieldset()
  call atlas__FieldSet__data_${ctype}$_specf_by_idx(fset%CPTR_PGIBUG_A, idx-1, field_cptr, rank, shape_cptr, strides_cptr)
  call array_c_to_f(field_cptr, rank, shape_cptr, strides_cptr, field)
end subroutine
!-------------------------------------------------------------------------------
#:endfor
#:endfor

subroutine dummy(this)
  use atlas_fieldset_c_binding
  class(atlas_MultiField), intent(in) :: this
  FCKIT_SUPPRESS_UNUSED(this)
end subroutine

end module atlas_multifield_module

